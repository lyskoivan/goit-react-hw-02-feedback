{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistic/Statistic.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App/App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","onClick","Statistic","label","value","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","name","target","textContent","toLowerCase","setState","countTotalFeedback","countPositiveFeedbackPercentage","difference","Math","round","this","Component","ReactDOM","render","document","getElementById"],"mappings":"0OAqBeA,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,oCACE,4BAAQC,KAAK,SAASC,QAASF,GAA/B,QAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,WAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,SCIWG,EAZG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAChB,4BACGD,EACAC,ICkBUC,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,4BACE,kBAAC,EAAD,CAAWP,MAAM,SAASC,MAAOE,IACjC,kBAAC,EAAD,CAAWH,MAAM,YAAYC,MAAOG,IACpC,kBAAC,EAAD,CAAWJ,MAAM,QAAQC,MAAOI,IAChC,kBAAC,EAAD,CAAWL,MAAM,UAAUC,MAAOK,IAClC,kBAAC,EAAD,CAAWN,MAAM,sBAAsBC,MAAOM,OCGrCC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICGUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,2BAAIA,ICIrBC,E,2MACnBC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPT,gBAAkB,YAAiB,IAC3BmB,EAD0B,EAAbC,OACCC,YAAYC,cAChC,EAAKC,UAAS,SAAAL,GAAK,sBAChBC,EAAOD,EAAMC,GAAQ,O,EAI1BK,mBAAqB,WACnB,OAAO,EAAKN,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAG3DgB,gCAAkC,WAChC,IAAMC,EAAa,EAAKR,MAAMX,KAAO,EAAKiB,qBAC1C,OAAOG,KAAKC,MAAmB,IAAbF,I,wEAGV,IAAD,EACwBG,KAAKX,MAA5BX,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAASI,MAAM,yBACb,kBAAC,EAAD,CAAiBb,gBAAiB6B,KAAK7B,mBAEzC,kBAAC,EAAD,CAASa,MAAM,cACkB,IAA9BgB,KAAKL,qBACJ,kBAAC,EAAD,CAAcR,QAAQ,sBAEtB,kBAAC,EAAD,CACET,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKL,qBACZb,mBAAoBkB,KAAKJ,0C,GAvCNK,aCDjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.3797b6fb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\n  <>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Good\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Neutral\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Bad\n    </button>\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistic = ({ label, value }) => (\n  <li>\n    {label}\n    {value}\n  </li>\n);\n\nStatistic.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Statistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Statistic from './Statistic/Statistic';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <ul>\n      <Statistic label=\"Good: \" value={good} />\n      <Statistic label=\"Neutral: \" value={neutral} />\n      <Statistic label=\"Bad: \" value={bad} />\n      <Statistic label=\"Total: \" value={total} />\n      <Statistic label=\"Positive feedback: \" value={positivePercentage} />\n    </ul>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.shape().isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\nimport Section from '../Section/Section';\nimport Notification from '../Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = ({ target }) => {\n    const name = target.textContent.toLowerCase();\n    this.setState(state => ({\n      [name]: state[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const difference = this.state.good / this.countTotalFeedback();\n    return Math.round(difference * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'normalize.css';\n\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}